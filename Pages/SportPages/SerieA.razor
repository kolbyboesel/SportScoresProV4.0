@page "/SerieA"
@inject IJSRuntime JSRuntime
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager

<PageTitle>Serie A</PageTitle>
<style>
  .navDivider {
    display: none !important;
  }
</style>
<div class="headerImage mobileSetting"><img class="height-6vh" src="/images/serieALogo.png"></div>
<!-- NAVBAR -->
<header class="site-navbar mt-3" style="top:1rem!important">
  <div class="container-fluid">
    <div class="row align-items-center">
      <div class="site-logo col-6" style="width: 40%;"></div>

      <nav class="mx-auto site-navigation sport-specific-dropdown center-elements">
        <ul class="site-menu js-clone-nav d-none d-xl-block ml-0 pl-0">
            <a class="nav-link active"><img src="/images/serieALogo.png" style="height: 6vh;"></a>
        </ul>
      </nav>
    </div>
  </div>
</header>

<div class="container no-gutters">
  <div class="row no-gutters responsiveSearchContainer">
    <div id="SerieASearch" class="container date-search-container pt-0 mlbSearch">
      <div class="row width-100">
        <div class="col-6 margin-auto center-elements">
          <a type="button" @onclick=showScoreSearch href="" class="btn search-btn" style="border-radius:5px">Scores</a>
        </div>
        <div class="col-6 margin-auto center-elements" style="display: none;">
          <a type="button" @onclick=showStandings href="" class="btn search-btn" style="border-radius:5px">Standings</a>
        </div>
      </div>
    </div>

    <EditForm id="SerieAScoreSearch" Model="@currentSearch" OnValidSubmit="HandleScoreSearch"
      class="date-search-bar scoreSearch" style="display: none;">

      <div class="container date-search-container pt-0">
        <div class="row width-100">

          <div class="col center-elements sm-align-end">
            <a type="button" @onclick=dateBack href="" class="btn search-btn" style="border-radius:5px">Back</a>
          </div>

          <div class="col center-elements">
            <div class="row">
              <label for="month" class="col-auto center-elements dateLabel">Month</label>
              <InputNumber @bind-Value="@currentSearch.Month" type="text" class="form-control col-8 col-md-12"
                placeholder="Month" id="month" name="month" max="12" min="1" required />
            </div>
          </div>

          <div class="col center-elements">
            <div class="row">
              <label for="day" class="col-auto center-elements dateLabel">Day</label>
              <InputNumber @bind-Value="@currentSearch.Day" type="text" class="form-control col-8 col-md-12"
                placeholder="Day" id="day" name="day" max="31" min="1" required />
            </div>
          </div>

          <div class="col center-elements">
            <div class="row">

              <label for="year" class="col-auto center-elements dateLabel">Year
              </label>
              <InputNumber @bind-Value="@currentSearch.Year" type="password" class="form-control col-8 col-md-12"
                placeholder="Year" id="year" name="year" max="2030" min="2000" required />
            </div>
          </div>

          <div class="col center-elements">
            <button type="submit" class="search-btn" style="border-radius:5px">Search</button>
          </div>
        </div>
      </div>
    </EditForm>
  </div>
  <div class="loading SerieALoading" style="display: none;">Loading&#8230;</div>

  <div class="row no-gutters indexContainerPad xs-padding containerSerieA">
    <div class="page-text">Choose an Option Above To Search For Scores or Betting Odds by Date</div>
  </div>
</div>

@code {

public class DateSearchModel
  {
    public int Year { get; set; }
    public int Month { get; set; }
    public int Day { get; set; }

  }
  private DateSearchModel currentSearch = new DateSearchModel();

  private async void HandleScoreSearch()
  {
        var Day = currentSearch.Day;
        var Month = currentSearch.Month;
        var Year = currentSearch.Year;
        string confirmDay = "";
        string confirmMonth = "";
        string confirmYear = "";

          if(Day < 10)
          {
            confirmDay = "0" + Day.ToString();
          }else{
            confirmDay = Day.ToString();
          };
          if(Month < 10)
          {
            confirmMonth = "0" + Month.ToString();
          }else{
            confirmMonth = Month.ToString();
            };
          confirmYear = Year.ToString();
 
        var date = confirmYear + "-" + confirmMonth + "-" + confirmDay;

        await JSRuntime.InvokeVoidAsync("loadScoreboard", "N", 1,"Serie A","containerSerieA", "SerieALoading", "null", date);
  }

  public async Task dateBack()
  {
    await JSRuntime.InvokeVoidAsync("showSportNav", "SerieASearch", "SerieAScoreSearch");
  }

  public async Task showStandings()
  {
    await JSRuntime.InvokeVoidAsync("showStandings", "tid", "sid");
  }
  public async Task showScoreSearch()
  {
    await JSRuntime.InvokeVoidAsync("showScoreSearch", "SerieASearch", "SerieAScoreSearch");
  }

  string cookieValue = "";
  protected override async Task OnInitializedAsync()
  {
        cookieValue = HttpContextAccessor.HttpContext.Request.Cookies["loggedInStatus"];
  }
  private string innerHtmlValue = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        innerHtmlValue = "";
    }


    public async Task showSignupModal()
    {
    await JSRuntime.InvokeVoidAsync("cookieInterop.setCookie", "showSignupModal", "true", null, null, null, null);
    NavigationManager.NavigateTo("/",forceLoad:true);
    }

  public async Task renderLogin()
  {
    await JSRuntime.InvokeVoidAsync("cookieInterop.setCookie", "showLogin", "true", null, null, null, null);
    NavigationManager.NavigateTo("/",forceLoad:true);
  }

  public async Task renderAccount()
  {
    await JSRuntime.InvokeVoidAsync("cookieInterop.setCookie", "showAccount", "true", null, null, null, null);
    NavigationManager.NavigateTo("/",forceLoad:true);
  }

  public async Task renderBettingOdds()
  {
    await JSRuntime.InvokeVoidAsync("cookieInterop.setCookie", "showBettingOdds", "true", null, null, null, null);
    NavigationManager.NavigateTo("/",forceLoad:true);
  }
  public async Task renderLiveScores()
  {
    await JSRuntime.InvokeVoidAsync("cookieInterop.setCookie", "showLiveScores", "true", null, null, null, null);
    NavigationManager.NavigateTo("/",forceLoad:true);
  }
  public async Task renderHome()
  {
    await JSRuntime.InvokeVoidAsync("cookieInterop.setCookie", "showHome", "true", null, null, null, null);
    NavigationManager.NavigateTo("/",forceLoad:true);
  }
}